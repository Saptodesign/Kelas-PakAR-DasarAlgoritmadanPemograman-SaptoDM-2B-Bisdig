# -*- coding: utf-8 -*-
"""SaptoDwiMulyana24110310076BisnisDigital2B.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mJCumDW9COWThZ4_Dlc_9m5zycAwVQtN
"""

import json
import csv
import os

# Nama file untuk menyimpan data inventori
INVENTORY_FILE = 'inventory.json'

def load_inventory():
    """
    Memuat data inventori dari file JSON.
    Jika file tidak ada, mengembalikan list kosong.
    """
    if os.path.exists(INVENTORY_FILE):
        with open(INVENTORY_FILE, 'r') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                # Mengatasi file yang kosong atau rusak
                return []
    return []

def save_inventory(inventory):
    """
    Menyimpan data inventori ke file JSON.
    """
    with open(INVENTORY_FILE, 'w') as f:
        json.dump(inventory, f, indent=4)

def add_item(inventory):
    """
    Menambahkan data barang baru ke inventori.
    Meminta input nama, stok, dan harga dari pengguna.
    """
    print("\n--- Tambah Barang Baru ---")
    name = input("Masukkan Nama Barang: ").strip()
    if not name:
        print("Nama barang tidak boleh kosong. Pembatalan penambahan barang.")
        return

    # Periksa apakah barang dengan nama yang sama sudah ada (case-insensitive)
    for item in inventory:
        if item['nama'].lower() == name.lower():
            print(f"Barang dengan nama '{name}' sudah ada. Silakan edit atau gunakan nama lain.")
            return

    while True:
        try:
            stock = int(input("Masukkan Stok Barang: "))
            if stock < 0:
                print("Stok tidak boleh negatif. Silakan masukkan angka positif.")
                continue
            break
        except ValueError:
            print("Input stok tidak valid. Harap masukkan angka.")

    while True:
        try:
            price = float(input("Masukkan Harga Barang: "))
            if price < 0:
                print("Harga tidak boleh negatif. Silakan masukkan angka positif.")
                continue
            break
        except ValueError:
            print("Input harga tidak valid. Harap masukkan angka.")

    inventory.append({"nama": name, "stok": stock, "harga": price})
    save_inventory(inventory)
    print(f"Barang '{name}' berhasil ditambahkan.")

def display_items(inventory):
    """
    Menampilkan daftar semua barang dalam inventori.
    Menampilkan pesan jika inventori kosong.
    """
    print("\n--- Daftar Barang ---")
    if not inventory:
        print("Inventori kosong.")
        return

    print(f"{'No.':<5} {'Nama Barang':<30} {'Stok':<10} {'Harga (Rp)':<15}")
    print("-" * 60)
    for i, item in enumerate(inventory):
        print(f"{i+1:<5} {item['nama']:<30} {item['stok']:<10} {item['harga']:<15.2f}")
    print("-" * 60)

def edit_item(inventory):
    """
    Mengedit data barang yang sudah ada berdasarkan nomor urut.
    Meminta input nomor urut, lalu nama, stok, dan harga baru.
    """
    display_items(inventory)
    if not inventory:
        return

    print("\n--- Edit Barang ---")
    while True:
        try:
            item_index = int(input("Masukkan Nomor Barang yang ingin diedit: ")) - 1
            if 0 <= item_index < len(inventory):
                break
            else:
                print("Nomor barang tidak valid. Silakan coba lagi.")
        except ValueError:
            print("Input tidak valid. Harap masukkan angka.")

    item = inventory[item_index]
    print(f"Mengedit barang: {item['nama']} (Stok: {item['stok']}, Harga: {item['harga']:.2f})")

    new_name = input(f"Masukkan Nama Baru (kosongkan jika tidak diubah, saat ini: {item['nama']}): ").strip()
    if new_name:
        # Periksa apakah nama baru sudah ada pada barang lain
        for i, existing_item in enumerate(inventory):
            if i != item_index and existing_item['nama'].lower() == new_name.lower():
                print(f"Nama '{new_name}' sudah digunakan oleh barang lain. Pembatalan edit.")
                return
        item['nama'] = new_name

    while True:
        new_stock_str = input(f"Masukkan Stok Baru (kosongkan jika tidak diubah, saat ini: {item['stok']}): ").strip()
        if not new_stock_str:
            break
        try:
            new_stock = int(new_stock_str)
            if new_stock < 0:
                print("Stok tidak boleh negatif. Silakan masukkan angka positif.")
                continue
            item['stok'] = new_stock
            break
        except ValueError:
            print("Input stok tidak valid. Harap masukkan angka.")

    while True:
        new_price_str = input(f"Masukkan Harga Baru (kosongkan jika tidak diubah, saat ini: {item['harga']:.2f}): ").strip()
        if not new_price_str:
            break
        try:
            new_price = float(new_price_str)
            if new_price < 0:
                print("Harga tidak boleh negatif. Silakan masukkan angka positif.")
                continue
            item['harga'] = new_price
            break
        except ValueError:
            print("Input harga tidak valid. Harap masukkan angka.")

    save_inventory(inventory)
    print(f"Barang '{item['nama']}' berhasil diperbarui.")

def delete_item(inventory):
    """
    Menghapus data barang dari inventori berdasarkan nomor urut.
    Meminta konfirmasi sebelum menghapus.
    """
    display_items(inventory)
    if not inventory:
        return

    print("\n--- Hapus Barang ---")
    while True:
        try:
            item_index = int(input("Masukkan Nomor Barang yang ingin dihapus: ")) - 1
            if 0 <= item_index < len(inventory):
                break
            else:
                print("Nomor barang tidak valid. Silakan coba lagi.")
        except ValueError:
            print("Input tidak valid. Harap masukkan angka.")

    item_name = inventory[item_index]['nama']
    confirm = input(f"Anda yakin ingin menghapus '{item_name}'? (ya/tidak): ").lower().strip()
    if confirm == 'ya':
        del inventory[item_index]
        save_inventory(inventory)
        print(f"Barang '{item_name}' berhasil dihapus.")
    else:
        print("Penghapusan dibatalkan.")

def search_item(inventory):
    """
    Mencari barang berdasarkan nama (case-insensitive).
    Menampilkan barang yang cocok atau pesan jika tidak ditemukan.
    """
    print("\n--- Cari Barang ---")
    if not inventory:
        print("Inventori kosong, tidak ada yang bisa dicari.")
        return

    search_term = input("Masukkan Nama Barang yang dicari: ").strip().lower()
    found_items = [item for item in inventory if search_term in item['nama'].lower()]

    if found_items:
        print("\n--- Hasil Pencarian ---")
        print(f"{'No.':<5} {'Nama Barang':<30} {'Stok':<10} {'Harga (Rp)':<15}")
        print("-" * 60)
        for i, item in enumerate(found_items):
            print(f"{i+1:<5} {item['nama']:<30} {item['stok']:<10} {item['harga']:<15.2f}")
        print("-" * 60)
    else:
        print(f"Barang dengan nama '{search_term}' tidak ditemukan.")

def export_to_csv(inventory):
    """
    Mengekspor data inventori ke file CSV.
    """
    if not inventory:
        print("Inventori kosong, tidak ada yang bisa diekspor.")
        return

    csv_file_name = 'inventory_report.csv'
    with open(csv_file_name, 'w', newline='') as csvfile:
        fieldnames = ['nama', 'stok', 'harga']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        writer.writerows(inventory)
    print(f"Data inventori berhasil diekspor ke '{csv_file_name}'.")

def generate_report(inventory):
    """
    Menghasilkan laporan ringkas inventori:
    - Jumlah total barang unik
    - Total stok semua barang
    - Total nilai inventori
    """
    print("\n--- Laporan Ringkas Inventori ---")
    if not inventory:
        print("Inventori kosong, tidak ada laporan yang bisa dibuat.")
        return

    total_unique_items = len(inventory)
    total_stock = sum(item['stok'] for item in inventory)
    total_inventory_value = sum(item['stok'] * item['harga'] for item in inventory)

    print(f"Jumlah Barang Unik: {total_unique_items}")
    print(f"Total Stok Semua Barang: {total_stock}")
    print(f"Total Nilai Inventori: Rp {total_inventory_value:,.2f}")
    print("-" * 60)


def main():
    """
    Fungsi utama aplikasi yang menampilkan menu dan mengelola interaksi pengguna.
    """
    inventory = load_inventory()

    while True:
        print("\n===== Sistem Manajemen Inventori Toko Kecil =====")
        print("1. Tambah Barang")
        print("2. Tampilkan Daftar Barang")
        print("3. Edit Barang")
        print("4. Hapus Barang")
        print("5. Cari Barang")
        print("6. Ekspor ke CSV")
        print("7. Laporan Inventori")
        print("8. Keluar")
        print("=================================================")

        choice = input("Pilih opsi (1-8): ").strip()

        if choice == '1':
            add_item(inventory)
        elif choice == '2':
            display_items(inventory)
        elif choice == '3':
            edit_item(inventory)
        elif choice == '4':
            delete_item(inventory)
        elif choice == '5':
            search_item(inventory)
        elif choice == '6':
            export_to_csv(inventory)
        elif choice == '7':
            generate_report(inventory)
        elif choice == '8':
            print("Terima kasih telah menggunakan aplikasi inventori. Sampai jumpa!")
            break
        else:
            print("Pilihan tidak valid. Silakan masukkan angka antara 1 dan 8.")

if __name__ == "__main__":
    main()